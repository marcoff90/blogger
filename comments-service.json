{"openapi":"3.0.0","info":{"title":"Comments Service API docs","description":"Responsible for handling comments to articles\n\n- Comments are fixed to article id, can be nested to the level 4, based on property depth -> when parent comment is on level 4, we set it's parent_id to the newly added comment to stop deeper nesting\n\n- The application validates if the article exists when comment is added -> every time article is added or deleted in blogger service, blogger service updates the ids of existing article in redis cache (24h), from which comments service takes the ids. If any article wouldn't be added/deleted in the last 24 hours and cache would be empty. The comments service calls internal api endpoint to obtain the ids and stores them in cache it self. In case of blogger service fail, the comment is stored to database with property published set to false. Comments service sends message to Blogger service, once Blogger is back online, it send back the message, the Comments service loads the fresh data and validates the not published articles\n\n- When article is deleted in blogger service, the comments are no longer needed -> blogger sends message, comments service deletes the comments, sends message back and article is deleted too so no non existent relations exist in db.\n\n- Public endpoints with no auth protection","contact":{"name":"Marek Slavicek"},"version":"1.0.0"},"servers":[{"url":"http://localhost:7777","description":"Comments Management Service"}],"paths":{"/comments-service-api/articles/{articleId}/comments":{"post":{"tags":["CommentsServiceAPI"],"summary":"Create Comment for article","parameters":[{"in":"path","name":"articleId","required":true,"schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateCommentInput"}}}},"responses":{"200":{"description":"Success","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateCommentResponse"}}}},"202":{"description":"Accepted - article id not validated through blogger service","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApiMessage"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/ValidationError"}}}}},"404":{"description":"Not found - article not found by id","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApiError"}}}}}},"get":{"tags":["CommentsServiceAPI"],"summary":"Get comments for article","parameters":[{"in":"path","name":"articleId","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"Success","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/GetCommentsResponse"}}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/ValidationError"}}}}}}}}},"components":{"schemas":{"CreateCommentInput":{"type":"object","required":["author","content"],"properties":{"author":{"type":"string","default":"John Doe"},"content":{"type":"string","default":"Loving this content"},"parent_id":{"type":"number","default":1}}},"CreateCommentResponse":{"type":"object","properties":{"id":{"type":"number"},"depth":{"type":"number"},"created_at":{"type":"number"},"author":{"type":"string"},"content":{"type":"string"},"parent_id":{"type":"number"},"article_id":{"type":"number"}}},"GetCommentsResponse":{"type":"object","properties":{"id":{"type":"number"},"author":{"type":"string"},"content":{"type":"string"},"article_id":{"type":"number"},"parent_id":{"type":"number"},"depth":{"type":"number"},"created_at":{"type":"number"},"children":{"type":"array","items":{"$ref":"#/components/schemas/GetCommentsResponse"}}}},"ApiError":{"type":"object","properties":{"error":{"type":"string"}}},"ValidationError":{"type":"object","properties":{"code":{"type":"string"},"expected":{"type":"string"},"received":{"type":"string"},"path":{"type":"array","items":{"type":"string"}},"message":{"type":"string"}}},"ApiMessage":{"type":"object","properties":{"message":{"type":"string"}}}}},"tags":[]}