/* tslint:disable */
/* eslint-disable */
/**
 * API Gateway docs
 * API Gateway for microservices of Blogger microservices.   In order to try out the endpoints in Swagger UI, you can use Api gateway server or choose corresponding server from the dropdown  The gateway is calling to api registry upon the start to retrieve the data of all the registered apis which it uses for creating the proxy -> it compares the apiname which is the path obtained from the docs of each registered api  and if it finds match it makes the call to the corresponding server using the same path.  The data is being cached for 24 hours using redis cache. In case of change, the application is listening on rabbitmq exchange queue specific for communication of api registry and gateway and if it recieves the message about update, it reloads the data directly
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from "./configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';

export const BASE_PATH = "http://localhost:3333".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: AxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    override name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}
